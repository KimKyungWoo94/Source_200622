/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.1, Date: 21-Jun-2019.
 */
#ifndef DOT3_ASN_H
#define DOT3_ASN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtxsrc/rtxCommon.h"
#include "rtpersrc/asn1per.h"

/**
 * Header file for ASN.1 module CITSapplMgmtIDs
 */
/**************************************************************/
/*                                                            */
/*  Ext3                                                      */
/*                                                            */
/**************************************************************/
/*
Ext3 ::= INTEGER (2113664..270549119, ...)
                                        four and more octets length

*/
typedef OSUINT32 Ext3;

EXTERN int asn1PE_Ext3 (OSCTXT* pctxt, Ext3 value);

EXTERN int asn1PD_Ext3 (OSCTXT* pctxt, Ext3* pvalue);

EXTERN void asn1Print_Ext3 (const char* name, const Ext3* pvalue);

/**************************************************************/
/*                                                            */
/*  Ext2                                                      */
/*                                                            */
/**************************************************************/
/*
Ext2 ::= CHOICE {
   content [0] INTEGER (16512..2113663), -- three octets length
   extension [1] Ext3
}
*/
/* Choice tag constants */

#define T_Ext2_content                  1
#define T_Ext2_extension                2

typedef struct EXTERN Ext2 {
   OSINT32 t;
   union {
      /* t = 1 */
      OSUINT32 content;
      /* t = 2 */
      Ext3 extension;
   } u;
} Ext2;

EXTERN int asn1PE_Ext2 (OSCTXT* pctxt, Ext2* pvalue);

EXTERN int asn1PD_Ext2 (OSCTXT* pctxt, Ext2* pvalue);

EXTERN void asn1Print_Ext2 (const char* name, const Ext2* pvalue);

EXTERN int asn1Init_Ext2 (Ext2* pvalue);

/**************************************************************/
/*                                                            */
/*  Ext1                                                      */
/*                                                            */
/**************************************************************/
/*
Ext1 ::= CHOICE {
   content [0] INTEGER (128..16511), -- two octets length
   extension [1] Ext2
}
*/
/* Choice tag constants */

#define T_Ext1_content                  1
#define T_Ext1_extension                2

typedef struct EXTERN Ext1 {
   OSINT32 t;
   union {
      /* t = 1 */
      OSUINT16 content;
      /* t = 2 */
      Ext2 *extension;
   } u;
} Ext1;

EXTERN int asn1PE_Ext1 (OSCTXT* pctxt, Ext1* pvalue);

EXTERN int asn1PD_Ext1 (OSCTXT* pctxt, Ext1* pvalue);

EXTERN void asn1Print_Ext1 (const char* name, const Ext1* pvalue);

EXTERN int asn1Init_Ext1 (Ext1* pvalue);

EXTERN void asn1Free_Ext1 (OSCTXT *pctxt, Ext1* pvalue);

/**************************************************************/
/*                                                            */
/*  VarLengthNumber                                           */
/*                                                            */
/**************************************************************/
/*
 End of IMPORTS
 Types
 Variable length data types
VarLengthNumber ::= CHOICE {
   content [0] INTEGER (0..127), -- one octet length
   extension [1] Ext1
}
*/
/* Choice tag constants */

#define T_VarLengthNumber_content       1
#define T_VarLengthNumber_extension     2

typedef struct EXTERN VarLengthNumber {
   OSINT32 t;
   union {
      /* t = 1 */
      OSUINT8 content;
      /* t = 2 */
      Ext1 *extension;
   } u;
} VarLengthNumber;

EXTERN int asn1PE_VarLengthNumber (OSCTXT* pctxt, VarLengthNumber* pvalue);

EXTERN int asn1PD_VarLengthNumber (OSCTXT* pctxt, VarLengthNumber* pvalue);

EXTERN void asn1Print_VarLengthNumber 
   (const char* name, const VarLengthNumber* pvalue);

EXTERN int asn1Init_VarLengthNumber (VarLengthNumber* pvalue);

EXTERN void asn1Free_VarLengthNumber (OSCTXT *pctxt, VarLengthNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  VarLengthNumber2                                          */
/*                                                            */
/**************************************************************/
/*
VarLengthNumber2 ::= CHOICE {
   shortNo [0] INTEGER (0..127),
   longNo [1] INTEGER (0..32767)
}
*/
/* Choice tag constants */

#define T_VarLengthNumber2_shortNo      1
#define T_VarLengthNumber2_longNo       2

typedef struct EXTERN VarLengthNumber2 {
   OSINT32 t;
   union {
      /* t = 1 */
      OSUINT8 shortNo;
      /* t = 2 */
      OSUINT16 longNo;
   } u;
} VarLengthNumber2;

EXTERN int asn1PE_VarLengthNumber2 (OSCTXT* pctxt, VarLengthNumber2* pvalue);

EXTERN int asn1PD_VarLengthNumber2 (OSCTXT* pctxt, VarLengthNumber2* pvalue);

EXTERN void asn1Print_VarLengthNumber2 
   (const char* name, const VarLengthNumber2* pvalue);

EXTERN int asn1Init_VarLengthNumber2 (VarLengthNumber2* pvalue);

/* Value definitions */

#define ASN1V_version 1

/**
 * Header file for ASN.1 module IEEE-1609-3-WEE
 */
/**************************************************************/
/*                                                            */
/*  RefExt                                                    */
/*                                                            */
/**************************************************************/
/*
 ExtensionTypes are specified for WSA and WSM
 Reference values (for all types of extensions)
RefExt ::= INTEGER (0..255)
*/
typedef OSUINT8 RefExt;

EXTERN int asn1PE_RefExt (OSCTXT* pctxt, RefExt value);

EXTERN int asn1PD_RefExt (OSCTXT* pctxt, RefExt* pvalue);

EXTERN void asn1Print_RefExt (const char* name, const RefExt* pvalue);

/**************************************************************/
/*                                                            */
/*  DataRate80211                                             */
/*                                                            */
/**************************************************************/
/*
 ChannelLoad is not specified in this standard.
 reserved for ISO RefExt in the range 80 to 120
 all other values of RefExt are reserved
 WSM extension elements
DataRate80211 ::= INTEGER (0..255)
*/
typedef OSUINT8 DataRate80211;

EXTERN int asn1PE_DataRate80211 (OSCTXT* pctxt, DataRate80211 value);

EXTERN int asn1PD_DataRate80211 (OSCTXT* pctxt, DataRate80211* pvalue);

EXTERN void asn1Print_DataRate80211 (const char* name, const DataRate80211* pvalue);

/**************************************************************/
/*                                                            */
/*  TXpower80211                                              */
/*                                                            */
/**************************************************************/
/*
TXpower80211 ::= INTEGER (-128..127)
*/
typedef OSINT8 TXpower80211;

EXTERN int asn1PE_TXpower80211 (OSCTXT* pctxt, TXpower80211 value);

EXTERN int asn1PD_TXpower80211 (OSCTXT* pctxt, TXpower80211* pvalue);

EXTERN void asn1Print_TXpower80211 (const char* name, const TXpower80211* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelNumber80211                                        */
/*                                                            */
/**************************************************************/
/*
ChannelNumber80211 ::= INTEGER (0..255)
*/
typedef OSUINT8 ChannelNumber80211;

EXTERN int asn1PE_ChannelNumber80211 (OSCTXT* pctxt, ChannelNumber80211 value);

EXTERN int asn1PD_ChannelNumber80211 (OSCTXT* pctxt, ChannelNumber80211* pvalue);

EXTERN void asn1Print_ChannelNumber80211 
   (const char* name, const ChannelNumber80211* pvalue);

/**************************************************************/
/*                                                            */
/*  RepeatRate                                                */
/*                                                            */
/**************************************************************/
/*
WSA message header extension elements
RepeatRate ::= INTEGER (0..255)
*/
typedef OSUINT8 RepeatRate;

EXTERN int asn1PE_RepeatRate (OSCTXT* pctxt, RepeatRate value);

EXTERN int asn1PD_RepeatRate (OSCTXT* pctxt, RepeatRate* pvalue);

EXTERN void asn1Print_RepeatRate (const char* name, const RepeatRate* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvertiserIdentifier                                      */
/*                                                            */
/**************************************************************/
/*
 max. 32 octets are allowed in AdvertiserIdentifier!!!
 The 32 characters may produce more than 32 octets in UPER
AdvertiserIdentifier ::= UTF8String (SIZE (1..32))
*/
typedef const OSUTF8CHAR* AdvertiserIdentifier;

EXTERN int asn1PE_AdvertiserIdentifier (OSCTXT* pctxt, AdvertiserIdentifier value);

EXTERN int asn1PD_AdvertiserIdentifier (OSCTXT* pctxt, AdvertiserIdentifier* pvalue);

EXTERN void asn1Print_AdvertiserIdentifier 
   (const char* name, const AdvertiserIdentifier pvalue);

EXTERN void asn1Free_AdvertiserIdentifier (OSCTXT *pctxt, AdvertiserIdentifier pvalue);

/**************************************************************/
/*                                                            */
/*  IPv6Address                                               */
/*                                                            */
/**************************************************************/
/*
IPv6Address ::= OCTET STRING (SIZE (16))
*/
typedef struct EXTERN IPv6Address {
   OSUINT32 numocts;
   OSOCTET data[16];
} IPv6Address;

EXTERN int asn1PE_IPv6Address (OSCTXT* pctxt, IPv6Address* pvalue);

EXTERN int asn1PD_IPv6Address (OSCTXT* pctxt, IPv6Address* pvalue);

EXTERN void asn1Print_IPv6Address (const char* name, const IPv6Address* pvalue);

EXTERN int asn1Init_IPv6Address (IPv6Address* pvalue);

/**************************************************************/
/*                                                            */
/*  ServicePort                                               */
/*                                                            */
/**************************************************************/
/*
ServicePort ::= INTEGER (0..65535)
*/
typedef OSUINT16 ServicePort;

EXTERN int asn1PE_ServicePort (OSCTXT* pctxt, ServicePort value);

EXTERN int asn1PD_ServicePort (OSCTXT* pctxt, ServicePort* pvalue);

EXTERN void asn1Print_ServicePort (const char* name, const ServicePort* pvalue);

/**************************************************************/
/*                                                            */
/*  MACaddress                                                */
/*                                                            */
/**************************************************************/
/*
MACaddress ::= OCTET STRING (SIZE (6))
*/
typedef struct EXTERN MACaddress {
   OSUINT32 numocts;
   OSOCTET data[6];
} MACaddress;

EXTERN int asn1PE_MACaddress (OSCTXT* pctxt, MACaddress* pvalue);

EXTERN int asn1PD_MACaddress (OSCTXT* pctxt, MACaddress* pvalue);

EXTERN void asn1Print_MACaddress (const char* name, const MACaddress* pvalue);

EXTERN int asn1Init_MACaddress (MACaddress* pvalue);

/**************************************************************/
/*                                                            */
/*  ProviderMacAddress                                        */
/*                                                            */
/**************************************************************/
/*
ProviderMacAddress ::= MACaddress
*/
typedef MACaddress ProviderMacAddress;

EXTERN int asn1PE_ProviderMacAddress (OSCTXT* pctxt, ProviderMacAddress* pvalue);

EXTERN int asn1PD_ProviderMacAddress (OSCTXT* pctxt, ProviderMacAddress* pvalue);

EXTERN void asn1Print_ProviderMacAddress 
   (const char* name, const ProviderMacAddress* pvalue);

EXTERN int asn1Init_ProviderMacAddress (ProviderMacAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  RcpiThreshold                                             */
/*                                                            */
/**************************************************************/
/*
RcpiThreshold ::= INTEGER (0..255)
                                    see IEEE Std 802.11

*/
typedef OSUINT8 RcpiThreshold;

EXTERN int asn1PE_RcpiThreshold (OSCTXT* pctxt, RcpiThreshold value);

EXTERN int asn1PD_RcpiThreshold (OSCTXT* pctxt, RcpiThreshold* pvalue);

EXTERN void asn1Print_RcpiThreshold (const char* name, const RcpiThreshold* pvalue);

/**************************************************************/
/*                                                            */
/*  WsaCountThreshold                                         */
/*                                                            */
/**************************************************************/
/*
WsaCountThreshold ::= INTEGER (0..255)
*/
typedef OSUINT8 WsaCountThreshold;

EXTERN int asn1PE_WsaCountThreshold (OSCTXT* pctxt, WsaCountThreshold value);

EXTERN int asn1PD_WsaCountThreshold (OSCTXT* pctxt, WsaCountThreshold* pvalue);

EXTERN void asn1Print_WsaCountThreshold 
   (const char* name, const WsaCountThreshold* pvalue);

/**************************************************************/
/*                                                            */
/*  WsaCountThresholdInterval                                 */
/*                                                            */
/**************************************************************/
/*
WsaCountThresholdInterval ::= INTEGER (0..255)
                                                value 0 is not used

*/
typedef OSUINT8 WsaCountThresholdInterval;

EXTERN int asn1PE_WsaCountThresholdInterval (OSCTXT* pctxt, WsaCountThresholdInterval value);

EXTERN int asn1PD_WsaCountThresholdInterval (OSCTXT* pctxt, WsaCountThresholdInterval* pvalue);

EXTERN void asn1Print_WsaCountThresholdInterval 
   (const char* name, const WsaCountThresholdInterval* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelAccess80211                                        */
/*                                                            */
/**************************************************************/
/*
ChannelAccess80211 ::= INTEGER { continuous(0), alternatingSCH(1), alternatingCCH(2) } (0..255)
*/
typedef enum {
   continuous = 0,
   alternatingSCH = 1,
   alternatingCCH = 2
} ChannelAccess80211_Root;

typedef OSUINT8 ChannelAccess80211;

EXTERN int asn1PE_ChannelAccess80211 (OSCTXT* pctxt, ChannelAccess80211 value);

EXTERN int asn1PD_ChannelAccess80211 (OSCTXT* pctxt, ChannelAccess80211* pvalue);

EXTERN void asn1Print_ChannelAccess80211 
   (const char* name, const ChannelAccess80211* pvalue);

/**************************************************************/
/*                                                            */
/*  SecondaryDns                                              */
/*                                                            */
/**************************************************************/
/*
RoutingAdvertisement extension elements
SecondaryDns ::= IPv6Address
*/
typedef IPv6Address SecondaryDns;

EXTERN int asn1PE_SecondaryDns (OSCTXT* pctxt, SecondaryDns* pvalue);

EXTERN int asn1PD_SecondaryDns (OSCTXT* pctxt, SecondaryDns* pvalue);

EXTERN void asn1Print_SecondaryDns (const char* name, const SecondaryDns* pvalue);

EXTERN int asn1Init_SecondaryDns (SecondaryDns* pvalue);

/**************************************************************/
/*                                                            */
/*  GatewayMacAddress                                         */
/*                                                            */
/**************************************************************/
/*
GatewayMacAddress ::= MACaddress
*/
typedef MACaddress GatewayMacAddress;

EXTERN int asn1PE_GatewayMacAddress (OSCTXT* pctxt, GatewayMacAddress* pvalue);

EXTERN int asn1PD_GatewayMacAddress (OSCTXT* pctxt, GatewayMacAddress* pvalue);

EXTERN void asn1Print_GatewayMacAddress 
   (const char* name, const GatewayMacAddress* pvalue);

EXTERN int asn1Init_GatewayMacAddress (GatewayMacAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  Longitude                                                 */
/*                                                            */
/**************************************************************/
/*
 Longitude ::= INTEGER (-1800000000..1800000001) as defined in 1609.3
Longitude ::= INTEGER (-1799999999..1800000001)
                                                 changed to J2735 definition

*/
typedef OSINT32 Longitude;

EXTERN int asn1PE_Longitude (OSCTXT* pctxt, Longitude value);

EXTERN int asn1PD_Longitude (OSCTXT* pctxt, Longitude* pvalue);

EXTERN void asn1Print_Longitude (const char* name, const Longitude* pvalue);

/**************************************************************/
/*                                                            */
/*  Elevation                                                 */
/*                                                            */
/**************************************************************/
/*
 1/10 micro degree
 Providing a range of plus-minus 180 degrees
Elevation ::= INTEGER (-4096..61439)
*/
typedef OSINT32 Elevation;

EXTERN int asn1PE_Elevation (OSCTXT* pctxt, Elevation value);

EXTERN int asn1PD_Elevation (OSCTXT* pctxt, Elevation* pvalue);

EXTERN void asn1Print_Elevation (const char* name, const Elevation* pvalue);

/**************************************************************/
/*                                                            */
/*  ProviderServiceContext_psc                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProviderServiceContext'
*/
typedef struct EXTERN ProviderServiceContext_psc {
   OSUINT32 numocts;
   OSOCTET data[31];
} ProviderServiceContext_psc;

EXTERN int asn1PE_ProviderServiceContext_psc (OSCTXT* pctxt, ProviderServiceContext_psc* pvalue);

EXTERN int asn1PD_ProviderServiceContext_psc (OSCTXT* pctxt, ProviderServiceContext_psc* pvalue);

EXTERN void asn1Print_ProviderServiceContext_psc 
   (const char* name, const ProviderServiceContext_psc* pvalue);

EXTERN int asn1Init_ProviderServiceContext_psc (ProviderServiceContext_psc* pvalue);

/**************************************************************/
/*                                                            */
/*  Latitude                                                  */
/*                                                            */
/**************************************************************/
/*
Latitude ::= SEQUENCE {
   fill [0] BIT STRING  (SIZE (1)), -- set to '0' (MSB of Latitude)
   lat [1] INTEGER (-900000000..900000001) -- in 0,1 micro degree, Providing a range of plus-minus 90 degrees 
}
*/
typedef struct EXTERN Latitude {
   ASN1BitStr32 fill;
   OSINT32 lat;
} Latitude;

EXTERN int asn1PE_Latitude (OSCTXT* pctxt, Latitude* pvalue);

EXTERN int asn1PD_Latitude (OSCTXT* pctxt, Latitude* pvalue);

EXTERN void asn1Print_Latitude (const char* name, const Latitude* pvalue);

EXTERN int asn1Init_Latitude (Latitude* pvalue);

/**************************************************************/
/*                                                            */
/*  TwoDLocation                                              */
/*                                                            */
/**************************************************************/
/*
TwoDLocation ::= SEQUENCE {
   latitude [0] Latitude,
   longitude [1] Longitude
}
*/
typedef struct EXTERN TwoDLocation {
   Latitude latitude;
   Longitude longitude;
} TwoDLocation;

EXTERN int asn1PE_TwoDLocation (OSCTXT* pctxt, TwoDLocation* pvalue);

EXTERN int asn1PD_TwoDLocation (OSCTXT* pctxt, TwoDLocation* pvalue);

EXTERN void asn1Print_TwoDLocation (const char* name, const TwoDLocation* pvalue);

EXTERN int asn1Init_TwoDLocation (TwoDLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  ThreeDLocation                                            */
/*                                                            */
/**************************************************************/
/*
ThreeDLocation ::= SEQUENCE {
   latitude [0] Latitude,
   longitude [1] Longitude,
   elevation [2] Elevation
}
*/
typedef struct EXTERN ThreeDLocation {
   Latitude latitude;
   Longitude longitude;
   Elevation elevation;
} ThreeDLocation;

EXTERN int asn1PE_ThreeDLocation (OSCTXT* pctxt, ThreeDLocation* pvalue);

EXTERN int asn1PD_ThreeDLocation (OSCTXT* pctxt, ThreeDLocation* pvalue);

EXTERN void asn1Print_ThreeDLocation (const char* name, const ThreeDLocation* pvalue);

EXTERN int asn1Init_ThreeDLocation (ThreeDLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  ProviderServiceContext                                    */
/*                                                            */
/**************************************************************/
/*
ServiceInfo extension elements
 Note: The size constraint has to be (0..255) although the PSC may
 consist of maximum 31 octets!
 ProviderServiceContext ::= OCTET STRING(SIZE(0..255)) 
 alternatively in order to get the size constraint checking
ProviderServiceContext ::= SEQUENCE {
   fillBit [0] BIT STRING  (SIZE (3)), -- all bits set to zero!
   psc [1] OCTET STRING (SIZE (0..31)) -- size zero is not recommended
}
*/
typedef struct EXTERN ProviderServiceContext {
   ASN1BitStr32 fillBit;
   ProviderServiceContext_psc psc;
} ProviderServiceContext;

EXTERN int asn1PE_ProviderServiceContext (OSCTXT* pctxt, ProviderServiceContext* pvalue);

EXTERN int asn1PD_ProviderServiceContext (OSCTXT* pctxt, ProviderServiceContext* pvalue);

EXTERN void asn1Print_ProviderServiceContext 
   (const char* name, const ProviderServiceContext* pvalue);

EXTERN int asn1Init_ProviderServiceContext (ProviderServiceContext* pvalue);

/**************************************************************/
/*                                                            */
/*  EdcaParameterRecord                                       */
/*                                                            */
/**************************************************************/
/*
EdcaParameterRecord ::= SEQUENCE {
   res [0] INTEGER (0..1),
   aci [1] INTEGER (0..3),
   acm [2] INTEGER (0..1),
   aifsn [3] INTEGER (0..15),
   ecwMax [4] INTEGER (0..15), -- ecwMax is the exponent in CWmax = 2^ecwMax-1
   ecwMin [5] INTEGER (0..15),
   txopLimit [6] INTEGER (0..65535)
}
*/
typedef struct EXTERN EdcaParameterRecord {
   OSUINT8 res;
   OSUINT8 aci;
   OSUINT8 acm;
   OSUINT8 aifsn;
   OSUINT8 ecwMax;
   OSUINT8 ecwMin;
   OSUINT16 txopLimit;
} EdcaParameterRecord;

EXTERN int asn1PE_EdcaParameterRecord (OSCTXT* pctxt, EdcaParameterRecord* pvalue);

EXTERN int asn1PD_EdcaParameterRecord (OSCTXT* pctxt, EdcaParameterRecord* pvalue);

EXTERN void asn1Print_EdcaParameterRecord 
   (const char* name, const EdcaParameterRecord* pvalue);

/**************************************************************/
/*                                                            */
/*  EdcaParameterSet                                          */
/*                                                            */
/**************************************************************/
/*
ChannelInfo extension elements
EdcaParameterSet ::= SEQUENCE {
   acbeRecord [0] EdcaParameterRecord,
   acbkRecord [1] EdcaParameterRecord,
   acviRecord [2] EdcaParameterRecord,
   acvoRecord [3] EdcaParameterRecord
}
*/
typedef struct EXTERN EdcaParameterSet {
   EdcaParameterRecord acbeRecord;
   EdcaParameterRecord acbkRecord;
   EdcaParameterRecord acviRecord;
   EdcaParameterRecord acvoRecord;
} EdcaParameterSet;

EXTERN int asn1PE_EdcaParameterSet (OSCTXT* pctxt, EdcaParameterSet* pvalue);

EXTERN int asn1PD_EdcaParameterSet (OSCTXT* pctxt, EdcaParameterSet* pvalue);

EXTERN void asn1Print_EdcaParameterSet 
   (const char* name, const EdcaParameterSet* pvalue);

/**************************************************************/
/*                                                            */
/*  Extension                                                 */
/*                                                            */
/**************************************************************/
/*
Extension ::= SEQUENCE {
   extensionId [0] EXT-TYPE.&extRef ({ExtensionTypes}),
   value [1] EXPLICIT EXT-TYPE.&ExtValue ({ExtensionTypes}{@.extensionId})
}
*/
typedef struct EXTERN Extension {
   RefExt extensionId;
   ASN1OpenType value;
} Extension;

EXTERN int asn1PE_Extension (OSCTXT* pctxt, Extension* pvalue);

EXTERN int asn1PD_Extension (OSCTXT* pctxt, Extension* pvalue);

EXTERN void asn1Print_Extension (const char* name, const Extension* pvalue);

EXTERN int asn1Init_Extension (Extension* pvalue);

EXTERN void asn1Free_Extension (OSCTXT *pctxt, Extension* pvalue);

/* Value definitions */

#define ASN1V_c_Reserved 0
#define ASN1V_c_TxPowerUsed80211 4
#define ASN1V_c_2Dlocation 5
#define ASN1V_c_3Dlocation 6
#define ASN1V_c_advertiserID 7
#define ASN1V_c_ProviderServContext 8
#define ASN1V_c_IPv6Address 9
#define ASN1V_c_servicePort 10
#define ASN1V_c_ProviderMACaddress 11
#define ASN1V_c_EDCAparameterSet 12
#define ASN1V_c_SecondaryDNS 13
#define ASN1V_c_GatewayMACaddress 14
#define ASN1V_c_ChannelNumber80211 15
#define ASN1V_c_DataRate80211 16
#define ASN1V_c_RepeatRate 17
#define ASN1V_c_RCPIthreshold 19
#define ASN1V_c_WSAcountThreshold 20
#define ASN1V_c_ChannelAccess 21
#define ASN1V_c_WSAcountThresInt 22
#define ASN1V_c_ChannelLoad 23

#include "dot3-asn.h"

/**
 * Header file for ASN.1 module IEEE-1609-3-WSA
 */
/**************************************************************/
/*                                                            */
/*  RsvAdvPrtVersion                                          */
/*                                                            */
/**************************************************************/
/*
RsvAdvPrtVersion ::= INTEGER (0..7)
*/
typedef OSUINT8 RsvAdvPrtVersion;

EXTERN int asn1PE_RsvAdvPrtVersion (OSCTXT* pctxt, RsvAdvPrtVersion value);

EXTERN int asn1PD_RsvAdvPrtVersion (OSCTXT* pctxt, RsvAdvPrtVersion* pvalue);

EXTERN void asn1Print_RsvAdvPrtVersion 
   (const char* name, const RsvAdvPrtVersion* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvMessageType                                         */
/*                                                            */
/**************************************************************/
/*
SrvAdvMessageType ::= INTEGER { saMessage(0), sarMessage(1) } (0..1)
*/
typedef enum {
   saMessage = 0,
   sarMessage = 1
} SrvAdvMessageType_Root;

typedef OSUINT8 SrvAdvMessageType;

EXTERN int asn1PE_SrvAdvMessageType (OSCTXT* pctxt, SrvAdvMessageType value);

EXTERN int asn1PD_SrvAdvMessageType (OSCTXT* pctxt, SrvAdvMessageType* pvalue);

EXTERN void asn1Print_SrvAdvMessageType 
   (const char* name, const SrvAdvMessageType* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvID                                                  */
/*                                                            */
/**************************************************************/
/*
SrvAdvID ::= INTEGER (0..15)
*/
typedef OSUINT8 SrvAdvID;

EXTERN int asn1PE_SrvAdvID (OSCTXT* pctxt, SrvAdvID value);

EXTERN int asn1PD_SrvAdvID (OSCTXT* pctxt, SrvAdvID* pvalue);

EXTERN void asn1Print_SrvAdvID (const char* name, const SrvAdvID* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvContentCount                                        */
/*                                                            */
/**************************************************************/
/*
SrvAdvContentCount ::= INTEGER (0..15)
*/
typedef OSUINT8 SrvAdvContentCount;

EXTERN int asn1PE_SrvAdvContentCount (OSCTXT* pctxt, SrvAdvContentCount value);

EXTERN int asn1PD_SrvAdvContentCount (OSCTXT* pctxt, SrvAdvContentCount* pvalue);

EXTERN void asn1Print_SrvAdvContentCount 
   (const char* name, const SrvAdvContentCount* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvMsgHeaderExt                                        */
/*                                                            */
/**************************************************************/
/*
SrvAdvMsgHeaderExt ::= Extension
*/
typedef Extension SrvAdvMsgHeaderExt;

EXTERN int asn1PE_SrvAdvMsgHeaderExt (OSCTXT* pctxt, SrvAdvMsgHeaderExt* pvalue);

EXTERN int asn1PD_SrvAdvMsgHeaderExt (OSCTXT* pctxt, SrvAdvMsgHeaderExt* pvalue);

EXTERN void asn1Print_SrvAdvMsgHeaderExt 
   (const char* name, const SrvAdvMsgHeaderExt* pvalue);

EXTERN int asn1Init_SrvAdvMsgHeaderExt (SrvAdvMsgHeaderExt* pvalue);

EXTERN void asn1Free_SrvAdvMsgHeaderExt (OSCTXT *pctxt, SrvAdvMsgHeaderExt* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelIndex                                              */
/*                                                            */
/**************************************************************/
/*
ChannelIndex ::= INTEGER { notUsed(0), firstEntry(1) } (0..31)
*/
typedef enum {
   notUsed = 0,
   firstEntry = 1
} ChannelIndex_Root;

typedef OSUINT8 ChannelIndex;

EXTERN int asn1PE_ChannelIndex (OSCTXT* pctxt, ChannelIndex value);

EXTERN int asn1PD_ChannelIndex (OSCTXT* pctxt, ChannelIndex* pvalue);

EXTERN void asn1Print_ChannelIndex (const char* name, const ChannelIndex* pvalue);

/**************************************************************/
/*                                                            */
/*  ReplyAddress                                              */
/*                                                            */
/**************************************************************/
/*
 For information: ISO definition
ReplyAddress ::= PortNumber -- when not present PSID is used for source and destination
 Dummy ReplyAddress as long as port numbers are not used
ReplyAddress ::= NULL
                       never used

*/
typedef void ReplyAddress;

EXTERN int asn1PE_ReplyAddress_ (OSCTXT* pctxt, void* pvalue);
#define asn1PE_ReplyAddress(pctxt) \
asn1PE_ReplyAddress_(pctxt, NULL)

EXTERN int asn1PD_ReplyAddress_ (OSCTXT* pctxt, void* pvalue);
#define asn1PD_ReplyAddress(pctxt) \
asn1PD_ReplyAddress_(pctxt, NULL)

EXTERN void asn1Print_ReplyAddress_ (const char* name, const void* pvalue);
#define asn1Print_ReplyAddress(name) \
asn1Print_ReplyAddress_(name, NULL)

/**************************************************************/
/*                                                            */
/*  MandApp                                                   */
/*                                                            */
/**************************************************************/
/*
 Dummy MandApp as long as this feature is not used
MandApp ::= NULL
*/
typedef void MandApp;

EXTERN int asn1PE_MandApp_ (OSCTXT* pctxt, void* pvalue);
#define asn1PE_MandApp(pctxt) \
asn1PE_MandApp_(pctxt, NULL)

EXTERN int asn1PD_MandApp_ (OSCTXT* pctxt, void* pvalue);
#define asn1PD_MandApp(pctxt) \
asn1PD_MandApp_(pctxt, NULL)

EXTERN void asn1Print_MandApp_ (const char* name, const void* pvalue);
#define asn1Print_MandApp(name) \
asn1Print_MandApp_(name, NULL)

/**************************************************************/
/*                                                            */
/*  ServiceInfoExt                                            */
/*                                                            */
/**************************************************************/
/*
ServiceInfoExt ::= Extension
*/
typedef Extension ServiceInfoExt;

EXTERN int asn1PE_ServiceInfoExt (OSCTXT* pctxt, ServiceInfoExt* pvalue);

EXTERN int asn1PD_ServiceInfoExt (OSCTXT* pctxt, ServiceInfoExt* pvalue);

EXTERN void asn1Print_ServiceInfoExt (const char* name, const ServiceInfoExt* pvalue);

EXTERN int asn1Init_ServiceInfoExt (ServiceInfoExt* pvalue);

EXTERN void asn1Free_ServiceInfoExt (OSCTXT *pctxt, ServiceInfoExt* pvalue);

/**************************************************************/
/*                                                            */
/*  OperatingClass80211                                       */
/*                                                            */
/**************************************************************/
/*
OperatingClass80211 ::= INTEGER (0..255)
*/
typedef OSUINT8 OperatingClass80211;

EXTERN int asn1PE_OperatingClass80211 (OSCTXT* pctxt, OperatingClass80211 value);

EXTERN int asn1PD_OperatingClass80211 (OSCTXT* pctxt, OperatingClass80211* pvalue);

EXTERN void asn1Print_OperatingClass80211 
   (const char* name, const OperatingClass80211* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelInfoExt                                            */
/*                                                            */
/**************************************************************/
/*
ChannelInfoExt ::= Extension
*/
typedef Extension ChannelInfoExt;

EXTERN int asn1PE_ChannelInfoExt (OSCTXT* pctxt, ChannelInfoExt* pvalue);

EXTERN int asn1PD_ChannelInfoExt (OSCTXT* pctxt, ChannelInfoExt* pvalue);

EXTERN void asn1Print_ChannelInfoExt (const char* name, const ChannelInfoExt* pvalue);

EXTERN int asn1Init_ChannelInfoExt (ChannelInfoExt* pvalue);

EXTERN void asn1Free_ChannelInfoExt (OSCTXT *pctxt, ChannelInfoExt* pvalue);

/**************************************************************/
/*                                                            */
/*  RouterLifetime                                            */
/*                                                            */
/**************************************************************/
/*
RouterLifetime ::= INTEGER (0..65535)
*/
typedef OSUINT16 RouterLifetime;

EXTERN int asn1PE_RouterLifetime (OSCTXT* pctxt, RouterLifetime value);

EXTERN int asn1PD_RouterLifetime (OSCTXT* pctxt, RouterLifetime* pvalue);

EXTERN void asn1Print_RouterLifetime (const char* name, const RouterLifetime* pvalue);

/**************************************************************/
/*                                                            */
/*  IpV6Prefix                                                */
/*                                                            */
/**************************************************************/
/*
IpV6Prefix ::= OCTET STRING (SIZE (16))
*/
typedef struct EXTERN IpV6Prefix {
   OSUINT32 numocts;
   OSOCTET data[16];
} IpV6Prefix;

EXTERN int asn1PE_IpV6Prefix (OSCTXT* pctxt, IpV6Prefix* pvalue);

EXTERN int asn1PD_IpV6Prefix (OSCTXT* pctxt, IpV6Prefix* pvalue);

EXTERN void asn1Print_IpV6Prefix (const char* name, const IpV6Prefix* pvalue);

EXTERN int asn1Init_IpV6Prefix (IpV6Prefix* pvalue);

/**************************************************************/
/*                                                            */
/*  IpV6PrefixLength                                          */
/*                                                            */
/**************************************************************/
/*
IpV6PrefixLength ::= INTEGER (0..255)
*/
typedef OSUINT8 IpV6PrefixLength;

EXTERN int asn1PE_IpV6PrefixLength (OSCTXT* pctxt, IpV6PrefixLength value);

EXTERN int asn1PD_IpV6PrefixLength (OSCTXT* pctxt, IpV6PrefixLength* pvalue);

EXTERN void asn1Print_IpV6PrefixLength 
   (const char* name, const IpV6PrefixLength* pvalue);

/**************************************************************/
/*                                                            */
/*  RoutAdvertExt                                             */
/*                                                            */
/**************************************************************/
/*
RoutAdvertExt ::= Extension
*/
typedef Extension RoutAdvertExt;

EXTERN int asn1PE_RoutAdvertExt (OSCTXT* pctxt, RoutAdvertExt* pvalue);

EXTERN int asn1PD_RoutAdvertExt (OSCTXT* pctxt, RoutAdvertExt* pvalue);

EXTERN void asn1Print_RoutAdvertExt (const char* name, const RoutAdvertExt* pvalue);

EXTERN int asn1Init_RoutAdvertExt (RoutAdvertExt* pvalue);

EXTERN void asn1Free_RoutAdvertExt (OSCTXT *pctxt, RoutAdvertExt* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvPrtVersion                                          */
/*                                                            */
/**************************************************************/
/*
SrvAdvPrtVersion ::= SEQUENCE {
   messageID [0] SrvAdvMessageType, -- always set to 0
   rsvAdvPrtVersion [1] RsvAdvPrtVersion -- Set to c-rsvAdvPrtVersionNo
}
*/
typedef struct EXTERN SrvAdvPrtVersion {
   SrvAdvMessageType messageID;
   RsvAdvPrtVersion rsvAdvPrtVersion;
} SrvAdvPrtVersion;

EXTERN int asn1PE_SrvAdvPrtVersion (OSCTXT* pctxt, SrvAdvPrtVersion* pvalue);

EXTERN int asn1PD_SrvAdvPrtVersion (OSCTXT* pctxt, SrvAdvPrtVersion* pvalue);

EXTERN void asn1Print_SrvAdvPrtVersion 
   (const char* name, const SrvAdvPrtVersion* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvChangeCount                                         */
/*                                                            */
/**************************************************************/
/*
SrvAdvChangeCount ::= SEQUENCE {
   saID [0] SrvAdvID,
   contentCount [1] SrvAdvContentCount
}
*/
typedef struct EXTERN SrvAdvChangeCount {
   SrvAdvID saID;
   SrvAdvContentCount contentCount;
} SrvAdvChangeCount;

EXTERN int asn1PE_SrvAdvChangeCount (OSCTXT* pctxt, SrvAdvChangeCount* pvalue);

EXTERN int asn1PD_SrvAdvChangeCount (OSCTXT* pctxt, SrvAdvChangeCount* pvalue);

EXTERN void asn1Print_SrvAdvChangeCount 
   (const char* name, const SrvAdvChangeCount* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvMsgHeaderExts                                       */
/*                                                            */
/**************************************************************/
/*
 WSA header extensions
SrvAdvMsgHeaderExts ::= SEQUENCE OF SrvAdvMsgHeaderExt
*/
/* List of SrvAdvMsgHeaderExt */
typedef OSRTDList SrvAdvMsgHeaderExts;

EXTERN int asn1PE_SrvAdvMsgHeaderExts (OSCTXT* pctxt, SrvAdvMsgHeaderExts* pvalue);

EXTERN int asn1PD_SrvAdvMsgHeaderExts (OSCTXT* pctxt, SrvAdvMsgHeaderExts* pvalue);

EXTERN void asn1Print_SrvAdvMsgHeaderExts 
   (const char* name, const SrvAdvMsgHeaderExts* pvalue);

EXTERN int asn1Init_SrvAdvMsgHeaderExts (SrvAdvMsgHeaderExts* pvalue);

EXTERN void asn1Free_SrvAdvMsgHeaderExts (OSCTXT *pctxt, SrvAdvMsgHeaderExts* pvalue);

/**************************************************************/
/*                                                            */
/*  ServiceInfoExts                                           */
/*                                                            */
/**************************************************************/
/*
 Service Info Extensions
ServiceInfoExts ::= SEQUENCE OF ServiceInfoExt
*/
/* List of ServiceInfoExt */
typedef OSRTDList ServiceInfoExts;

EXTERN int asn1PE_ServiceInfoExts (OSCTXT* pctxt, ServiceInfoExts* pvalue);

EXTERN int asn1PD_ServiceInfoExts (OSCTXT* pctxt, ServiceInfoExts* pvalue);

EXTERN void asn1Print_ServiceInfoExts 
   (const char* name, const ServiceInfoExts* pvalue);

EXTERN int asn1Init_ServiceInfoExts (ServiceInfoExts* pvalue);

EXTERN void asn1Free_ServiceInfoExts (OSCTXT *pctxt, ServiceInfoExts* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelOptions                                            */
/*                                                            */
/**************************************************************/
/*
ChannelOptions ::= SEQUENCE {
   mandApp [0] MandApp OPTIONAL, -- in WSA set to '0'b
   serviceProviderPort [1] ReplyAddress OPTIONAL, -- in WSA set to '0'b
   extensions [2] ServiceInfoExts OPTIONAL
}
*/
typedef struct EXTERN ChannelOptions {
   struct {
      unsigned mandAppPresent : 1;
      unsigned serviceProviderPortPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ServiceInfoExts extensions;
} ChannelOptions;

EXTERN int asn1PE_ChannelOptions (OSCTXT* pctxt, ChannelOptions* pvalue);

EXTERN int asn1PD_ChannelOptions (OSCTXT* pctxt, ChannelOptions* pvalue);

EXTERN void asn1Print_ChannelOptions (const char* name, const ChannelOptions* pvalue);

EXTERN int asn1Init_ChannelOptions (ChannelOptions* pvalue);

EXTERN void asn1Free_ChannelOptions (OSCTXT *pctxt, ChannelOptions* pvalue);

/**************************************************************/
/*                                                            */
/*  ServiceInfo                                               */
/*                                                            */
/**************************************************************/
/*
ServiceInfo ::= SEQUENCE {
   serviceID [0] EXPLICIT VarLengthNumber, -- PSID
   channelIndex [1] ChannelIndex, -- 5 bits
   chOptions [2] ChannelOptions
}
*/
typedef struct EXTERN ServiceInfo {
   VarLengthNumber serviceID;
   ChannelIndex channelIndex;
   ChannelOptions chOptions;
} ServiceInfo;

EXTERN int asn1PE_ServiceInfo (OSCTXT* pctxt, ServiceInfo* pvalue);

EXTERN int asn1PD_ServiceInfo (OSCTXT* pctxt, ServiceInfo* pvalue);

EXTERN void asn1Print_ServiceInfo (const char* name, const ServiceInfo* pvalue);

EXTERN int asn1Init_ServiceInfo (ServiceInfo* pvalue);

EXTERN void asn1Free_ServiceInfo (OSCTXT *pctxt, ServiceInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  ServiceInfos                                              */
/*                                                            */
/**************************************************************/
/*
 Service Info List
ServiceInfos ::= SEQUENCE OF ServiceInfo
                                          '0' size allows to send only a routing advertisement

*/
/* List of ServiceInfo */
typedef OSRTDList ServiceInfos;

EXTERN int asn1PE_ServiceInfos (OSCTXT* pctxt, ServiceInfos* pvalue);

EXTERN int asn1PD_ServiceInfos (OSCTXT* pctxt, ServiceInfos* pvalue);

EXTERN void asn1Print_ServiceInfos (const char* name, const ServiceInfos* pvalue);

EXTERN int asn1Init_ServiceInfos (ServiceInfos* pvalue);

EXTERN void asn1Free_ServiceInfos (OSCTXT *pctxt, ServiceInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  WsaChInfoDataRate                                         */
/*                                                            */
/**************************************************************/
/*
WsaChInfoDataRate ::= SEQUENCE {
   adaptable [0] BIT STRING  (SIZE (1)),
   dataRate [1] INTEGER (0..127)
}
*/
typedef struct EXTERN WsaChInfoDataRate {
   ASN1BitStr32 adaptable;
   OSUINT8 dataRate;
} WsaChInfoDataRate;

EXTERN int asn1PE_WsaChInfoDataRate (OSCTXT* pctxt, WsaChInfoDataRate* pvalue);

EXTERN int asn1PD_WsaChInfoDataRate (OSCTXT* pctxt, WsaChInfoDataRate* pvalue);

EXTERN void asn1Print_WsaChInfoDataRate 
   (const char* name, const WsaChInfoDataRate* pvalue);

EXTERN int asn1Init_WsaChInfoDataRate (WsaChInfoDataRate* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelInfoExts                                           */
/*                                                            */
/**************************************************************/
/*
 Channel Info extensions
ChannelInfoExts ::= SEQUENCE OF ChannelInfoExt
*/
/* List of ChannelInfoExt */
typedef OSRTDList ChannelInfoExts;

EXTERN int asn1PE_ChannelInfoExts (OSCTXT* pctxt, ChannelInfoExts* pvalue);

EXTERN int asn1PD_ChannelInfoExts (OSCTXT* pctxt, ChannelInfoExts* pvalue);

EXTERN void asn1Print_ChannelInfoExts 
   (const char* name, const ChannelInfoExts* pvalue);

EXTERN int asn1Init_ChannelInfoExts (ChannelInfoExts* pvalue);

EXTERN void asn1Free_ChannelInfoExts (OSCTXT *pctxt, ChannelInfoExts* pvalue);

/**************************************************************/
/*                                                            */
/*  ChInfoOptions                                             */
/*                                                            */
/**************************************************************/
/*
ChInfoOptions ::= SEQUENCE {
   option1 [0] NULL OPTIONAL, -- not used
   option2 [1] NULL OPTIONAL, -- not used
   option3 [2] NULL OPTIONAL, -- not used
   option4 [3] NULL OPTIONAL, -- not used
   option5 [4] NULL OPTIONAL, -- not used
   option6 [5] NULL OPTIONAL, -- not used
   option7 [6] NULL OPTIONAL, -- not used
   extensions [7] ChannelInfoExts OPTIONAL
}
    this is the one octet "Channel Info Option Indicator"

*/
typedef struct EXTERN ChInfoOptions {
   struct {
      unsigned option1Present : 1;
      unsigned option2Present : 1;
      unsigned option3Present : 1;
      unsigned option4Present : 1;
      unsigned option5Present : 1;
      unsigned option6Present : 1;
      unsigned option7Present : 1;
      unsigned extensionsPresent : 1;
   } m;
   ChannelInfoExts extensions;
} ChInfoOptions;

EXTERN int asn1PE_ChInfoOptions (OSCTXT* pctxt, ChInfoOptions* pvalue);

EXTERN int asn1PD_ChInfoOptions (OSCTXT* pctxt, ChInfoOptions* pvalue);

EXTERN void asn1Print_ChInfoOptions (const char* name, const ChInfoOptions* pvalue);

EXTERN int asn1Init_ChInfoOptions (ChInfoOptions* pvalue);

EXTERN void asn1Free_ChInfoOptions (OSCTXT *pctxt, ChInfoOptions* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelInfo                                               */
/*                                                            */
/**************************************************************/
/*
ChannelInfo ::= SEQUENCE {
   operatingClass [0] OperatingClass80211,
   channelNumber [1] ChannelNumber80211,
   powerLevel [2] TXpower80211,
   dataRate [3] WsaChInfoDataRate,
   extensions [4] ChInfoOptions
}
*/
typedef struct EXTERN ChannelInfo {
   OperatingClass80211 operatingClass;
   ChannelNumber80211 channelNumber;
   TXpower80211 powerLevel;
   WsaChInfoDataRate dataRate;
   ChInfoOptions extensions;
} ChannelInfo;

EXTERN int asn1PE_ChannelInfo (OSCTXT* pctxt, ChannelInfo* pvalue);

EXTERN int asn1PD_ChannelInfo (OSCTXT* pctxt, ChannelInfo* pvalue);

EXTERN void asn1Print_ChannelInfo (const char* name, const ChannelInfo* pvalue);

EXTERN int asn1Init_ChannelInfo (ChannelInfo* pvalue);

EXTERN void asn1Free_ChannelInfo (OSCTXT *pctxt, ChannelInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelInfos                                              */
/*                                                            */
/**************************************************************/
/*
 Channel Info List
ChannelInfos ::= SEQUENCE OF ChannelInfo
*/
/* List of ChannelInfo */
typedef OSRTDList ChannelInfos;

EXTERN int asn1PE_ChannelInfos (OSCTXT* pctxt, ChannelInfos* pvalue);

EXTERN int asn1PD_ChannelInfos (OSCTXT* pctxt, ChannelInfos* pvalue);

EXTERN void asn1Print_ChannelInfos (const char* name, const ChannelInfos* pvalue);

EXTERN int asn1Init_ChannelInfos (ChannelInfos* pvalue);

EXTERN void asn1Free_ChannelInfos (OSCTXT *pctxt, ChannelInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  RoutAdvertExts                                            */
/*                                                            */
/**************************************************************/
/*
 Routing Advertisement extensions
RoutAdvertExts ::= SEQUENCE OF RoutAdvertExt
*/
/* List of RoutAdvertExt */
typedef OSRTDList RoutAdvertExts;

EXTERN int asn1PE_RoutAdvertExts (OSCTXT* pctxt, RoutAdvertExts* pvalue);

EXTERN int asn1PD_RoutAdvertExts (OSCTXT* pctxt, RoutAdvertExts* pvalue);

EXTERN void asn1Print_RoutAdvertExts (const char* name, const RoutAdvertExts* pvalue);

EXTERN int asn1Init_RoutAdvertExts (RoutAdvertExts* pvalue);

EXTERN void asn1Free_RoutAdvertExts (OSCTXT *pctxt, RoutAdvertExts* pvalue);

/**************************************************************/
/*                                                            */
/*  RoutingAdvertisement                                      */
/*                                                            */
/**************************************************************/
/*
 Routing Advertisement
RoutingAdvertisement ::= SEQUENCE {
   lifetime [0] RouterLifetime,
   ipPrefix [1] IpV6Prefix,
   ipPrefixLength [2] IpV6PrefixLength,
   defaultGateway [3] IPv6Address,
   primaryDns [4] IPv6Address,
   extensions [5] RoutAdvertExts
}
*/
typedef struct EXTERN RoutingAdvertisement {
   RouterLifetime lifetime;
   IpV6Prefix ipPrefix;
   IpV6PrefixLength ipPrefixLength;
   IPv6Address defaultGateway;
   IPv6Address primaryDns;
   RoutAdvertExts extensions;
} RoutingAdvertisement;

EXTERN int asn1PE_RoutingAdvertisement (OSCTXT* pctxt, RoutingAdvertisement* pvalue);

EXTERN int asn1PD_RoutingAdvertisement (OSCTXT* pctxt, RoutingAdvertisement* pvalue);

EXTERN void asn1Print_RoutingAdvertisement 
   (const char* name, const RoutingAdvertisement* pvalue);

EXTERN int asn1Init_RoutingAdvertisement (RoutingAdvertisement* pvalue);

EXTERN void asn1Free_RoutingAdvertisement (OSCTXT *pctxt, 
   RoutingAdvertisement* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvBody                                                */
/*                                                            */
/**************************************************************/
/*
SrvAdvBody ::= SEQUENCE {
   changeCount [0] SrvAdvChangeCount,
   extensions [1] SrvAdvMsgHeaderExts OPTIONAL,
   serviceInfos [2] ServiceInfos OPTIONAL,
   channelInfos [3] ChannelInfos OPTIONAL,
   routingAdvertisement [4] RoutingAdvertisement OPTIONAL
}
*/
typedef struct EXTERN SrvAdvBody {
   struct {
      unsigned extensionsPresent : 1;
      unsigned serviceInfosPresent : 1;
      unsigned channelInfosPresent : 1;
      unsigned routingAdvertisementPresent : 1;
   } m;
   SrvAdvChangeCount changeCount;
   SrvAdvMsgHeaderExts extensions;
   ServiceInfos serviceInfos;
   ChannelInfos channelInfos;
   RoutingAdvertisement routingAdvertisement;
} SrvAdvBody;

EXTERN int asn1PE_SrvAdvBody (OSCTXT* pctxt, SrvAdvBody* pvalue);

EXTERN int asn1PD_SrvAdvBody (OSCTXT* pctxt, SrvAdvBody* pvalue);

EXTERN void asn1Print_SrvAdvBody (const char* name, const SrvAdvBody* pvalue);

EXTERN int asn1Init_SrvAdvBody (SrvAdvBody* pvalue);

EXTERN void asn1Free_SrvAdvBody (OSCTXT *pctxt, SrvAdvBody* pvalue);

/**************************************************************/
/*                                                            */
/*  SrvAdvMsg                                                 */
/*                                                            */
/**************************************************************/
/*
 WSA message
SrvAdvMsg ::= SEQUENCE {
   version [0] SrvAdvPrtVersion, -- WSA version
   body [1] SrvAdvBody
}
*/
typedef struct EXTERN SrvAdvMsg {
   SrvAdvPrtVersion version;
   SrvAdvBody body;
} SrvAdvMsg;

EXTERN int asn1PE_SrvAdvMsg (OSCTXT* pctxt, SrvAdvMsg* pvalue);

EXTERN int asn1PD_SrvAdvMsg (OSCTXT* pctxt, SrvAdvMsg* pvalue);

EXTERN void asn1Print_SrvAdvMsg (const char* name, const SrvAdvMsg* pvalue);

EXTERN int asn1Init_SrvAdvMsg (SrvAdvMsg* pvalue);

EXTERN void asn1Free_SrvAdvMsg (OSCTXT *pctxt, SrvAdvMsg* pvalue);

/* Value definitions */

#define ASN1V_c_rsvAdvPrtVersionNo 3

#include "dot3-asn.h"

/**
 * Header file for ASN.1 module IEEE-1609-3-WSM
 */
/**************************************************************/
/*                                                            */
/*  ShortMsgVersion                                           */
/*                                                            */
/**************************************************************/
/*
ShortMsgVersion ::= INTEGER (0..7)
*/
typedef OSUINT8 ShortMsgVersion;

EXTERN int asn1PE_ShortMsgVersion (OSCTXT* pctxt, ShortMsgVersion value);

EXTERN int asn1PD_ShortMsgVersion (OSCTXT* pctxt, ShortMsgVersion* pvalue);

EXTERN void asn1Print_ShortMsgVersion 
   (const char* name, const ShortMsgVersion* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgNextension                                        */
/*                                                            */
/**************************************************************/
/*
 A single extension element
ShortMsgNextension ::= Extension
*/
typedef Extension ShortMsgNextension;

EXTERN int asn1PE_ShortMsgNextension (OSCTXT* pctxt, ShortMsgNextension* pvalue);

EXTERN int asn1PD_ShortMsgNextension (OSCTXT* pctxt, ShortMsgNextension* pvalue);

EXTERN void asn1Print_ShortMsgNextension 
   (const char* name, const ShortMsgNextension* pvalue);

EXTERN int asn1Init_ShortMsgNextension (ShortMsgNextension* pvalue);

EXTERN void asn1Free_ShortMsgNextension (OSCTXT *pctxt, ShortMsgNextension* pvalue);

/**************************************************************/
/*                                                            */
/*  NoTpidProcessing                                          */
/*                                                            */
/**************************************************************/
/*
NoTpidProcessing ::= BIT STRING  (SIZE (1))
*/
typedef ASN1BitStr32 NoTpidProcessing;

EXTERN int asn1PE_NoTpidProcessing (OSCTXT* pctxt, NoTpidProcessing value);

EXTERN int asn1PD_NoTpidProcessing (OSCTXT* pctxt, NoTpidProcessing* pvalue);

EXTERN void asn1Print_NoTpidProcessing 
   (const char* name, const NoTpidProcessing* pvalue);

EXTERN int asn1Init_NoTpidProcessing (NoTpidProcessing* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgData                                              */
/*                                                            */
/**************************************************************/
/*
 Payload length and data
ShortMsgData ::= OCTET STRING
  maximum size is given by access technology

*/
typedef OSDynOctStr ShortMsgData;

EXTERN int asn1PE_ShortMsgData (OSCTXT* pctxt, ShortMsgData value);

EXTERN int asn1PD_ShortMsgData (OSCTXT* pctxt, ShortMsgData* pvalue);

EXTERN void asn1Print_ShortMsgData (const char* name, const ShortMsgData* pvalue);

EXTERN int asn1Init_ShortMsgData (ShortMsgData* pvalue);

EXTERN void asn1Free_ShortMsgData (OSCTXT *pctxt, ShortMsgData* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgTextension                                        */
/*                                                            */
/**************************************************************/
/*
 a single T-Extension element
ShortMsgTextension ::= Extension
*/
typedef Extension ShortMsgTextension;

EXTERN int asn1PE_ShortMsgTextension (OSCTXT* pctxt, ShortMsgTextension* pvalue);

EXTERN int asn1PD_ShortMsgTextension (OSCTXT* pctxt, ShortMsgTextension* pvalue);

EXTERN void asn1Print_ShortMsgTextension 
   (const char* name, const ShortMsgTextension* pvalue);

EXTERN int asn1Init_ShortMsgTextension (ShortMsgTextension* pvalue);

EXTERN void asn1Free_ShortMsgTextension (OSCTXT *pctxt, ShortMsgTextension* pvalue);

/**************************************************************/
/*                                                            */
/*  DummyExtension                                            */
/*                                                            */
/**************************************************************/
/*
DummyExtension ::= NULL
*/
typedef void DummyExtension;

EXTERN int asn1PE_DummyExtension_ (OSCTXT* pctxt, void* pvalue);
#define asn1PE_DummyExtension(pctxt) \
asn1PE_DummyExtension_(pctxt, NULL)

EXTERN int asn1PD_DummyExtension_ (OSCTXT* pctxt, void* pvalue);
#define asn1PD_DummyExtension(pctxt) \
asn1PD_DummyExtension_(pctxt, NULL)

EXTERN void asn1Print_DummyExtension_ (const char* name, const void* pvalue);
#define asn1Print_DummyExtension(name) \
asn1Print_DummyExtension_(name, NULL)

/**************************************************************/
/*                                                            */
/*  ShortMsgNextensions                                       */
/*                                                            */
/**************************************************************/
/*
 networking extensions
 Sequence of 0 to n extension elements
ShortMsgNextensions ::= SEQUENCE OF ShortMsgNextension
*/
/* List of ShortMsgNextension */
typedef OSRTDList ShortMsgNextensions;

EXTERN int asn1PE_ShortMsgNextensions (OSCTXT* pctxt, ShortMsgNextensions* pvalue);

EXTERN int asn1PD_ShortMsgNextensions (OSCTXT* pctxt, ShortMsgNextensions* pvalue);

EXTERN void asn1Print_ShortMsgNextensions 
   (const char* name, const ShortMsgNextensions* pvalue);

EXTERN int asn1Init_ShortMsgNextensions (ShortMsgNextensions* pvalue);

EXTERN void asn1Free_ShortMsgNextensions (OSCTXT *pctxt, ShortMsgNextensions* pvalue);

/**************************************************************/
/*                                                            */
/*  NullNetworking                                            */
/*                                                            */
/**************************************************************/
/*
NullNetworking ::= SEQUENCE {
   version [0] ShortMsgVersion, -- set to c-shortMsgVersionNo
   nExtensions [1] ShortMsgNextensions OPTIONAL
}
*/
typedef struct EXTERN NullNetworking {
   struct {
      unsigned nExtensionsPresent : 1;
   } m;
   ShortMsgVersion version;
   ShortMsgNextensions nExtensions;
} NullNetworking;

EXTERN int asn1PE_NullNetworking (OSCTXT* pctxt, NullNetworking* pvalue);

EXTERN int asn1PD_NullNetworking (OSCTXT* pctxt, NullNetworking* pvalue);

EXTERN void asn1Print_NullNetworking (const char* name, const NullNetworking* pvalue);

EXTERN int asn1Init_NullNetworking (NullNetworking* pvalue);

EXTERN void asn1Free_NullNetworking (OSCTXT *pctxt, NullNetworking* pvalue);

/**************************************************************/
/*                                                            */
/*  NoSubtypeProcessing                                       */
/*                                                            */
/**************************************************************/
/*
NoSubtypeProcessing ::= SEQUENCE {
   optBit [0] BIT STRING  (SIZE (1)), -- always set to '0'b
   version [1] ShortMsgVersion -- set to c-shortMsgVersionNo
}
*/
typedef struct EXTERN NoSubtypeProcessing {
   ASN1BitStr32 optBit;
   ShortMsgVersion version;
} NoSubtypeProcessing;

EXTERN int asn1PE_NoSubtypeProcessing (OSCTXT* pctxt, NoSubtypeProcessing* pvalue);

EXTERN int asn1PD_NoSubtypeProcessing (OSCTXT* pctxt, NoSubtypeProcessing* pvalue);

EXTERN void asn1Print_NoSubtypeProcessing 
   (const char* name, const NoSubtypeProcessing* pvalue);

EXTERN int asn1Init_NoSubtypeProcessing (NoSubtypeProcessing* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgSubtype                                           */
/*                                                            */
/**************************************************************/
/*
 Sub-Types
 With UPER, the below 16 choices produce a 4 bit tag number (0 .. 15) 
 choices of type NoSubtypeProcessing cannot be processed
ShortMsgSubtype ::= CHOICE {
   nullNetworking [0] NullNetworking,
   subTypeReserved1 [1] NoSubtypeProcessing, -- reserved for ISO
   subTypeReserved2 [2] NoSubtypeProcessing, -- reserved for ISO
   subTypeReserved3 [3] NoSubtypeProcessing, -- reserved for ISO
   subTypeReserved4 [4] NoSubtypeProcessing, -- reserved for ISO
   subTypeReserved5 [5] NoSubtypeProcessing, -- reserved for ISO
   subTypeReserved6 [6] NoSubtypeProcessing, -- reserved for ISO
   subTypeReserved7 [7] NoSubtypeProcessing, -- reserved for ISO
   subTypeReserved8 [8] NoSubtypeProcessing,
   subTypeReserved9 [9] NoSubtypeProcessing,
   subTypeReserved19 [10] NoSubtypeProcessing,
   subTypeReserved11 [11] NoSubtypeProcessing,
   subTypeReserved12 [12] NoSubtypeProcessing,
   subTypeReserved13 [13] NoSubtypeProcessing,
   subTypeReserved14 [14] NoSubtypeProcessing,
   subTypeReserved15 [15] NoSubtypeProcessing
}
*/
/* Choice tag constants */

#define T_ShortMsgSubtype_nullNetworking 1
#define T_ShortMsgSubtype_subTypeReserved1 2
#define T_ShortMsgSubtype_subTypeReserved2 3
#define T_ShortMsgSubtype_subTypeReserved3 4
#define T_ShortMsgSubtype_subTypeReserved4 5
#define T_ShortMsgSubtype_subTypeReserved5 6
#define T_ShortMsgSubtype_subTypeReserved6 7
#define T_ShortMsgSubtype_subTypeReserved7 8
#define T_ShortMsgSubtype_subTypeReserved8 9
#define T_ShortMsgSubtype_subTypeReserved9 10
#define T_ShortMsgSubtype_subTypeReserved19 11
#define T_ShortMsgSubtype_subTypeReserved11 12
#define T_ShortMsgSubtype_subTypeReserved12 13
#define T_ShortMsgSubtype_subTypeReserved13 14
#define T_ShortMsgSubtype_subTypeReserved14 15
#define T_ShortMsgSubtype_subTypeReserved15 16

typedef struct EXTERN ShortMsgSubtype {
   OSINT32 t;
   union {
      /* t = 1 */
      NullNetworking *nullNetworking;
      /* t = 2 */
      NoSubtypeProcessing *subTypeReserved1;
      /* t = 3 */
      NoSubtypeProcessing *subTypeReserved2;
      /* t = 4 */
      NoSubtypeProcessing *subTypeReserved3;
      /* t = 5 */
      NoSubtypeProcessing *subTypeReserved4;
      /* t = 6 */
      NoSubtypeProcessing *subTypeReserved5;
      /* t = 7 */
      NoSubtypeProcessing *subTypeReserved6;
      /* t = 8 */
      NoSubtypeProcessing *subTypeReserved7;
      /* t = 9 */
      NoSubtypeProcessing *subTypeReserved8;
      /* t = 10 */
      NoSubtypeProcessing *subTypeReserved9;
      /* t = 11 */
      NoSubtypeProcessing *subTypeReserved19;
      /* t = 12 */
      NoSubtypeProcessing *subTypeReserved11;
      /* t = 13 */
      NoSubtypeProcessing *subTypeReserved12;
      /* t = 14 */
      NoSubtypeProcessing *subTypeReserved13;
      /* t = 15 */
      NoSubtypeProcessing *subTypeReserved14;
      /* t = 16 */
      NoSubtypeProcessing *subTypeReserved15;
   } u;
} ShortMsgSubtype;

EXTERN int asn1PE_ShortMsgSubtype (OSCTXT* pctxt, ShortMsgSubtype* pvalue);

EXTERN int asn1PD_ShortMsgSubtype (OSCTXT* pctxt, ShortMsgSubtype* pvalue);

EXTERN void asn1Print_ShortMsgSubtype 
   (const char* name, const ShortMsgSubtype* pvalue);

EXTERN int asn1Init_ShortMsgSubtype (ShortMsgSubtype* pvalue);

EXTERN void asn1Free_ShortMsgSubtype (OSCTXT *pctxt, ShortMsgSubtype* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgTextensions                                       */
/*                                                            */
/**************************************************************/
/*
 transport extensions
 Sequence of 0 to n T-Extension elements
ShortMsgTextensions ::= SEQUENCE OF ShortMsgTextension
*/
/* List of ShortMsgTextension */
typedef OSRTDList ShortMsgTextensions;

EXTERN int asn1PE_ShortMsgTextensions (OSCTXT* pctxt, ShortMsgTextensions* pvalue);

EXTERN int asn1PD_ShortMsgTextensions (OSCTXT* pctxt, ShortMsgTextensions* pvalue);

EXTERN void asn1Print_ShortMsgTextensions 
   (const char* name, const ShortMsgTextensions* pvalue);

EXTERN int asn1Init_ShortMsgTextensions (ShortMsgTextensions* pvalue);

EXTERN void asn1Free_ShortMsgTextensions (OSCTXT *pctxt, ShortMsgTextensions* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgBcPDU                                             */
/*                                                            */
/**************************************************************/
/*
ShortMsgBcPDU ::= SEQUENCE {
   destAddress [0] EXPLICIT VarLengthNumber, -- that is PSID / ITS-AID
   tExtensions [1] ShortMsgTextensions OPTIONAL
}
*/
typedef struct EXTERN ShortMsgBcPDU {
   struct {
      unsigned tExtensionsPresent : 1;
   } m;
   VarLengthNumber destAddress;
   ShortMsgTextensions tExtensions;
} ShortMsgBcPDU;

EXTERN int asn1PE_ShortMsgBcPDU (OSCTXT* pctxt, ShortMsgBcPDU* pvalue);

EXTERN int asn1PD_ShortMsgBcPDU (OSCTXT* pctxt, ShortMsgBcPDU* pvalue);

EXTERN void asn1Print_ShortMsgBcPDU (const char* name, const ShortMsgBcPDU* pvalue);

EXTERN int asn1Init_ShortMsgBcPDU (ShortMsgBcPDU* pvalue);

EXTERN void asn1Free_ShortMsgBcPDU (OSCTXT *pctxt, ShortMsgBcPDU* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgTpdus                                             */
/*                                                            */
/**************************************************************/
/*
 Transport protocol header choices (TPID)
 With UPER, the below 128 choices produce a 7 bit tag number (0 .. 127)
 choices of type NoTpidProcessing cannot be processed
ShortMsgTpdus ::= CHOICE {
   bcMode [0] ShortMsgBcPDU,
   tpidReserved1 [1] NoTpidProcessing, -- reserved for ISO
   tpidReserved2 [2] NoTpidProcessing, -- reserved for ISO
   tpidReserved3 [3] NoTpidProcessing, -- reserved for ISO
   tpidReserved4 [4] NoTpidProcessing, -- reserved for ISO
   tpidReserved5 [5] NoTpidProcessing, -- reserved for ISO
   tpidReserved6 [6] NoTpidProcessing, -- reserved for ISO
   tpidReserved7 [7] NoTpidProcessing, -- reserved for ISO
   tpidReserved8 [8] NoTpidProcessing, -- reserved for ISO
   tpidReserved9 [9] NoTpidProcessing, -- reserved for ISO
   tpidReserved10 [10] NoTpidProcessing, -- reserved for ISO
   tpidReserved11 [11] NoTpidProcessing,
   tpidReserved12 [12] NoTpidProcessing,
   tpidReserved13 [13] NoTpidProcessing,
   tpidReserved14 [14] NoTpidProcessing,
   tpidReserved15 [15] NoTpidProcessing,
   tpidReserved16 [16] NoTpidProcessing,
   tpidReserved17 [17] NoTpidProcessing,
   tpidReserved18 [18] NoTpidProcessing,
   tpidReserved19 [19] NoTpidProcessing,
   tpidReserved20 [20] NoTpidProcessing,
   tpidReserved21 [21] NoTpidProcessing,
   tpidReserved22 [22] NoTpidProcessing,
   tpidReserved23 [23] NoTpidProcessing,
   tpidReserved24 [24] NoTpidProcessing,
   tpidReserved25 [25] NoTpidProcessing,
   tpidReserved26 [26] NoTpidProcessing,
   tpidReserved27 [27] NoTpidProcessing,
   tpidReserved28 [28] NoTpidProcessing,
   tpidReserved29 [29] NoTpidProcessing,
   tpidReserved30 [30] NoTpidProcessing,
   tpidReserved31 [31] NoTpidProcessing,
   tpidReserved32 [32] NoTpidProcessing,
   tpidReserved33 [33] NoTpidProcessing,
   tpidReserved34 [34] NoTpidProcessing,
   tpidReserved35 [35] NoTpidProcessing,
   tpidReserved36 [36] NoTpidProcessing,
   tpidReserved37 [37] NoTpidProcessing,
   tpidReserved38 [38] NoTpidProcessing,
   tpidReserved39 [39] NoTpidProcessing,
   tpidReserved40 [40] NoTpidProcessing,
   tpidReserved41 [41] NoTpidProcessing,
   tpidReserved42 [42] NoTpidProcessing,
   tpidReserved43 [43] NoTpidProcessing,
   tpidReserved44 [44] NoTpidProcessing,
   tpidReserved45 [45] NoTpidProcessing,
   tpidReserved46 [46] NoTpidProcessing,
   tpidReserved47 [47] NoTpidProcessing,
   tpidReserved48 [48] NoTpidProcessing,
   tpidReserved49 [49] NoTpidProcessing,
   tpidReserved50 [50] NoTpidProcessing,
   tpidReserved51 [51] NoTpidProcessing,
   tpidReserved52 [52] NoTpidProcessing,
   tpidReserved53 [53] NoTpidProcessing,
   tpidReserved54 [54] NoTpidProcessing,
   tpidReserved55 [55] NoTpidProcessing,
   tpidReserved56 [56] NoTpidProcessing,
   tpidReserved57 [57] NoTpidProcessing,
   tpidReserved58 [58] NoTpidProcessing,
   tpidReserved59 [59] NoTpidProcessing,
   tpidReserved60 [60] NoTpidProcessing,
   tpidReserved61 [61] NoTpidProcessing,
   tpidReserved62 [62] NoTpidProcessing,
   tpidReserved63 [63] NoTpidProcessing,
   tpidReserved64 [64] NoTpidProcessing,
   tpidReserved65 [65] NoTpidProcessing,
   tpidReserved66 [66] NoTpidProcessing,
   tpidReserved67 [67] NoTpidProcessing,
   tpidReserved68 [68] NoTpidProcessing,
   tpidReserved69 [69] NoTpidProcessing,
   tpidReserved70 [70] NoTpidProcessing,
   tpidReserved71 [71] NoTpidProcessing,
   tpidReserved72 [72] NoTpidProcessing,
   tpidReserved73 [73] NoTpidProcessing,
   tpidReserved74 [74] NoTpidProcessing,
   tpidReserved75 [75] NoTpidProcessing,
   tpidReserved76 [76] NoTpidProcessing,
   tpidReserved77 [77] NoTpidProcessing,
   tpidReserved78 [78] NoTpidProcessing,
   tpidReserved79 [79] NoTpidProcessing,
   tpidReserved80 [80] NoTpidProcessing,
   tpidReserved81 [81] NoTpidProcessing,
   tpidReserved82 [82] NoTpidProcessing,
   tpidReserved83 [83] NoTpidProcessing,
   tpidReserved84 [84] NoTpidProcessing,
   tpidReserved85 [85] NoTpidProcessing,
   tpidReserved86 [86] NoTpidProcessing,
   tpidReserved87 [87] NoTpidProcessing,
   tpidReserved88 [88] NoTpidProcessing,
   tpidReserved89 [89] NoTpidProcessing,
   tpidReserved90 [90] NoTpidProcessing,
   tpidReserved91 [91] NoTpidProcessing,
   tpidReserved92 [92] NoTpidProcessing,
   tpidReserved93 [93] NoTpidProcessing,
   tpidReserved94 [94] NoTpidProcessing,
   tpidReserved95 [95] NoTpidProcessing,
   tpidReserved96 [96] NoTpidProcessing,
   tpidReserved97 [97] NoTpidProcessing,
   tpidReserved98 [98] NoTpidProcessing,
   tpidReserved99 [99] NoTpidProcessing,
   tpidReserved100 [100] NoTpidProcessing,
   tpidReserved101 [101] NoTpidProcessing,
   tpidReserved102 [102] NoTpidProcessing,
   tpidReserved103 [103] NoTpidProcessing,
   tpidReserved104 [104] NoTpidProcessing,
   tpidReserved105 [105] NoTpidProcessing,
   tpidReserved106 [106] NoTpidProcessing,
   tpidReserved107 [107] NoTpidProcessing,
   tpidReserved108 [108] NoTpidProcessing,
   tpidReserved109 [109] NoTpidProcessing,
   tpidReserved110 [110] NoTpidProcessing,
   tpidReserved111 [111] NoTpidProcessing,
   tpidReserved112 [112] NoTpidProcessing,
   tpidReserved113 [113] NoTpidProcessing,
   tpidReserved114 [114] NoTpidProcessing,
   tpidReserved115 [115] NoTpidProcessing,
   tpidReserved116 [116] NoTpidProcessing,
   tpidReserved117 [117] NoTpidProcessing,
   tpidReserved118 [118] NoTpidProcessing,
   tpidReserved119 [119] NoTpidProcessing,
   tpidReserved120 [120] NoTpidProcessing,
   tpidReserved121 [121] NoTpidProcessing,
   tpidReserved122 [122] NoTpidProcessing,
   tpidReserved123 [123] NoTpidProcessing,
   tpidReserved124 [124] NoTpidProcessing,
   tpidReserved125 [125] NoTpidProcessing,
   tpidReserved126 [126] NoTpidProcessing,
   tpidReserved127 [127] NoTpidProcessing
}
*/
/* Choice tag constants */

#define T_ShortMsgTpdus_bcMode          1
#define T_ShortMsgTpdus_tpidReserved1   2
#define T_ShortMsgTpdus_tpidReserved2   3
#define T_ShortMsgTpdus_tpidReserved3   4
#define T_ShortMsgTpdus_tpidReserved4   5
#define T_ShortMsgTpdus_tpidReserved5   6
#define T_ShortMsgTpdus_tpidReserved6   7
#define T_ShortMsgTpdus_tpidReserved7   8
#define T_ShortMsgTpdus_tpidReserved8   9
#define T_ShortMsgTpdus_tpidReserved9   10
#define T_ShortMsgTpdus_tpidReserved10  11
#define T_ShortMsgTpdus_tpidReserved11  12
#define T_ShortMsgTpdus_tpidReserved12  13
#define T_ShortMsgTpdus_tpidReserved13  14
#define T_ShortMsgTpdus_tpidReserved14  15
#define T_ShortMsgTpdus_tpidReserved15  16
#define T_ShortMsgTpdus_tpidReserved16  17
#define T_ShortMsgTpdus_tpidReserved17  18
#define T_ShortMsgTpdus_tpidReserved18  19
#define T_ShortMsgTpdus_tpidReserved19  20
#define T_ShortMsgTpdus_tpidReserved20  21
#define T_ShortMsgTpdus_tpidReserved21  22
#define T_ShortMsgTpdus_tpidReserved22  23
#define T_ShortMsgTpdus_tpidReserved23  24
#define T_ShortMsgTpdus_tpidReserved24  25
#define T_ShortMsgTpdus_tpidReserved25  26
#define T_ShortMsgTpdus_tpidReserved26  27
#define T_ShortMsgTpdus_tpidReserved27  28
#define T_ShortMsgTpdus_tpidReserved28  29
#define T_ShortMsgTpdus_tpidReserved29  30
#define T_ShortMsgTpdus_tpidReserved30  31
#define T_ShortMsgTpdus_tpidReserved31  32
#define T_ShortMsgTpdus_tpidReserved32  33
#define T_ShortMsgTpdus_tpidReserved33  34
#define T_ShortMsgTpdus_tpidReserved34  35
#define T_ShortMsgTpdus_tpidReserved35  36
#define T_ShortMsgTpdus_tpidReserved36  37
#define T_ShortMsgTpdus_tpidReserved37  38
#define T_ShortMsgTpdus_tpidReserved38  39
#define T_ShortMsgTpdus_tpidReserved39  40
#define T_ShortMsgTpdus_tpidReserved40  41
#define T_ShortMsgTpdus_tpidReserved41  42
#define T_ShortMsgTpdus_tpidReserved42  43
#define T_ShortMsgTpdus_tpidReserved43  44
#define T_ShortMsgTpdus_tpidReserved44  45
#define T_ShortMsgTpdus_tpidReserved45  46
#define T_ShortMsgTpdus_tpidReserved46  47
#define T_ShortMsgTpdus_tpidReserved47  48
#define T_ShortMsgTpdus_tpidReserved48  49
#define T_ShortMsgTpdus_tpidReserved49  50
#define T_ShortMsgTpdus_tpidReserved50  51
#define T_ShortMsgTpdus_tpidReserved51  52
#define T_ShortMsgTpdus_tpidReserved52  53
#define T_ShortMsgTpdus_tpidReserved53  54
#define T_ShortMsgTpdus_tpidReserved54  55
#define T_ShortMsgTpdus_tpidReserved55  56
#define T_ShortMsgTpdus_tpidReserved56  57
#define T_ShortMsgTpdus_tpidReserved57  58
#define T_ShortMsgTpdus_tpidReserved58  59
#define T_ShortMsgTpdus_tpidReserved59  60
#define T_ShortMsgTpdus_tpidReserved60  61
#define T_ShortMsgTpdus_tpidReserved61  62
#define T_ShortMsgTpdus_tpidReserved62  63
#define T_ShortMsgTpdus_tpidReserved63  64
#define T_ShortMsgTpdus_tpidReserved64  65
#define T_ShortMsgTpdus_tpidReserved65  66
#define T_ShortMsgTpdus_tpidReserved66  67
#define T_ShortMsgTpdus_tpidReserved67  68
#define T_ShortMsgTpdus_tpidReserved68  69
#define T_ShortMsgTpdus_tpidReserved69  70
#define T_ShortMsgTpdus_tpidReserved70  71
#define T_ShortMsgTpdus_tpidReserved71  72
#define T_ShortMsgTpdus_tpidReserved72  73
#define T_ShortMsgTpdus_tpidReserved73  74
#define T_ShortMsgTpdus_tpidReserved74  75
#define T_ShortMsgTpdus_tpidReserved75  76
#define T_ShortMsgTpdus_tpidReserved76  77
#define T_ShortMsgTpdus_tpidReserved77  78
#define T_ShortMsgTpdus_tpidReserved78  79
#define T_ShortMsgTpdus_tpidReserved79  80
#define T_ShortMsgTpdus_tpidReserved80  81
#define T_ShortMsgTpdus_tpidReserved81  82
#define T_ShortMsgTpdus_tpidReserved82  83
#define T_ShortMsgTpdus_tpidReserved83  84
#define T_ShortMsgTpdus_tpidReserved84  85
#define T_ShortMsgTpdus_tpidReserved85  86
#define T_ShortMsgTpdus_tpidReserved86  87
#define T_ShortMsgTpdus_tpidReserved87  88
#define T_ShortMsgTpdus_tpidReserved88  89
#define T_ShortMsgTpdus_tpidReserved89  90
#define T_ShortMsgTpdus_tpidReserved90  91
#define T_ShortMsgTpdus_tpidReserved91  92
#define T_ShortMsgTpdus_tpidReserved92  93
#define T_ShortMsgTpdus_tpidReserved93  94
#define T_ShortMsgTpdus_tpidReserved94  95
#define T_ShortMsgTpdus_tpidReserved95  96
#define T_ShortMsgTpdus_tpidReserved96  97
#define T_ShortMsgTpdus_tpidReserved97  98
#define T_ShortMsgTpdus_tpidReserved98  99
#define T_ShortMsgTpdus_tpidReserved99  100
#define T_ShortMsgTpdus_tpidReserved100 101
#define T_ShortMsgTpdus_tpidReserved101 102
#define T_ShortMsgTpdus_tpidReserved102 103
#define T_ShortMsgTpdus_tpidReserved103 104
#define T_ShortMsgTpdus_tpidReserved104 105
#define T_ShortMsgTpdus_tpidReserved105 106
#define T_ShortMsgTpdus_tpidReserved106 107
#define T_ShortMsgTpdus_tpidReserved107 108
#define T_ShortMsgTpdus_tpidReserved108 109
#define T_ShortMsgTpdus_tpidReserved109 110
#define T_ShortMsgTpdus_tpidReserved110 111
#define T_ShortMsgTpdus_tpidReserved111 112
#define T_ShortMsgTpdus_tpidReserved112 113
#define T_ShortMsgTpdus_tpidReserved113 114
#define T_ShortMsgTpdus_tpidReserved114 115
#define T_ShortMsgTpdus_tpidReserved115 116
#define T_ShortMsgTpdus_tpidReserved116 117
#define T_ShortMsgTpdus_tpidReserved117 118
#define T_ShortMsgTpdus_tpidReserved118 119
#define T_ShortMsgTpdus_tpidReserved119 120
#define T_ShortMsgTpdus_tpidReserved120 121
#define T_ShortMsgTpdus_tpidReserved121 122
#define T_ShortMsgTpdus_tpidReserved122 123
#define T_ShortMsgTpdus_tpidReserved123 124
#define T_ShortMsgTpdus_tpidReserved124 125
#define T_ShortMsgTpdus_tpidReserved125 126
#define T_ShortMsgTpdus_tpidReserved126 127
#define T_ShortMsgTpdus_tpidReserved127 128

typedef struct EXTERN ShortMsgTpdus {
   OSINT32 t;
   union {
      /* t = 1 */
      ShortMsgBcPDU *bcMode;
      /* t = 2 */
      NoTpidProcessing *tpidReserved1;
      /* t = 3 */
      NoTpidProcessing *tpidReserved2;
      /* t = 4 */
      NoTpidProcessing *tpidReserved3;
      /* t = 5 */
      NoTpidProcessing *tpidReserved4;
      /* t = 6 */
      NoTpidProcessing *tpidReserved5;
      /* t = 7 */
      NoTpidProcessing *tpidReserved6;
      /* t = 8 */
      NoTpidProcessing *tpidReserved7;
      /* t = 9 */
      NoTpidProcessing *tpidReserved8;
      /* t = 10 */
      NoTpidProcessing *tpidReserved9;
      /* t = 11 */
      NoTpidProcessing *tpidReserved10;
      /* t = 12 */
      NoTpidProcessing *tpidReserved11;
      /* t = 13 */
      NoTpidProcessing *tpidReserved12;
      /* t = 14 */
      NoTpidProcessing *tpidReserved13;
      /* t = 15 */
      NoTpidProcessing *tpidReserved14;
      /* t = 16 */
      NoTpidProcessing *tpidReserved15;
      /* t = 17 */
      NoTpidProcessing *tpidReserved16;
      /* t = 18 */
      NoTpidProcessing *tpidReserved17;
      /* t = 19 */
      NoTpidProcessing *tpidReserved18;
      /* t = 20 */
      NoTpidProcessing *tpidReserved19;
      /* t = 21 */
      NoTpidProcessing *tpidReserved20;
      /* t = 22 */
      NoTpidProcessing *tpidReserved21;
      /* t = 23 */
      NoTpidProcessing *tpidReserved22;
      /* t = 24 */
      NoTpidProcessing *tpidReserved23;
      /* t = 25 */
      NoTpidProcessing *tpidReserved24;
      /* t = 26 */
      NoTpidProcessing *tpidReserved25;
      /* t = 27 */
      NoTpidProcessing *tpidReserved26;
      /* t = 28 */
      NoTpidProcessing *tpidReserved27;
      /* t = 29 */
      NoTpidProcessing *tpidReserved28;
      /* t = 30 */
      NoTpidProcessing *tpidReserved29;
      /* t = 31 */
      NoTpidProcessing *tpidReserved30;
      /* t = 32 */
      NoTpidProcessing *tpidReserved31;
      /* t = 33 */
      NoTpidProcessing *tpidReserved32;
      /* t = 34 */
      NoTpidProcessing *tpidReserved33;
      /* t = 35 */
      NoTpidProcessing *tpidReserved34;
      /* t = 36 */
      NoTpidProcessing *tpidReserved35;
      /* t = 37 */
      NoTpidProcessing *tpidReserved36;
      /* t = 38 */
      NoTpidProcessing *tpidReserved37;
      /* t = 39 */
      NoTpidProcessing *tpidReserved38;
      /* t = 40 */
      NoTpidProcessing *tpidReserved39;
      /* t = 41 */
      NoTpidProcessing *tpidReserved40;
      /* t = 42 */
      NoTpidProcessing *tpidReserved41;
      /* t = 43 */
      NoTpidProcessing *tpidReserved42;
      /* t = 44 */
      NoTpidProcessing *tpidReserved43;
      /* t = 45 */
      NoTpidProcessing *tpidReserved44;
      /* t = 46 */
      NoTpidProcessing *tpidReserved45;
      /* t = 47 */
      NoTpidProcessing *tpidReserved46;
      /* t = 48 */
      NoTpidProcessing *tpidReserved47;
      /* t = 49 */
      NoTpidProcessing *tpidReserved48;
      /* t = 50 */
      NoTpidProcessing *tpidReserved49;
      /* t = 51 */
      NoTpidProcessing *tpidReserved50;
      /* t = 52 */
      NoTpidProcessing *tpidReserved51;
      /* t = 53 */
      NoTpidProcessing *tpidReserved52;
      /* t = 54 */
      NoTpidProcessing *tpidReserved53;
      /* t = 55 */
      NoTpidProcessing *tpidReserved54;
      /* t = 56 */
      NoTpidProcessing *tpidReserved55;
      /* t = 57 */
      NoTpidProcessing *tpidReserved56;
      /* t = 58 */
      NoTpidProcessing *tpidReserved57;
      /* t = 59 */
      NoTpidProcessing *tpidReserved58;
      /* t = 60 */
      NoTpidProcessing *tpidReserved59;
      /* t = 61 */
      NoTpidProcessing *tpidReserved60;
      /* t = 62 */
      NoTpidProcessing *tpidReserved61;
      /* t = 63 */
      NoTpidProcessing *tpidReserved62;
      /* t = 64 */
      NoTpidProcessing *tpidReserved63;
      /* t = 65 */
      NoTpidProcessing *tpidReserved64;
      /* t = 66 */
      NoTpidProcessing *tpidReserved65;
      /* t = 67 */
      NoTpidProcessing *tpidReserved66;
      /* t = 68 */
      NoTpidProcessing *tpidReserved67;
      /* t = 69 */
      NoTpidProcessing *tpidReserved68;
      /* t = 70 */
      NoTpidProcessing *tpidReserved69;
      /* t = 71 */
      NoTpidProcessing *tpidReserved70;
      /* t = 72 */
      NoTpidProcessing *tpidReserved71;
      /* t = 73 */
      NoTpidProcessing *tpidReserved72;
      /* t = 74 */
      NoTpidProcessing *tpidReserved73;
      /* t = 75 */
      NoTpidProcessing *tpidReserved74;
      /* t = 76 */
      NoTpidProcessing *tpidReserved75;
      /* t = 77 */
      NoTpidProcessing *tpidReserved76;
      /* t = 78 */
      NoTpidProcessing *tpidReserved77;
      /* t = 79 */
      NoTpidProcessing *tpidReserved78;
      /* t = 80 */
      NoTpidProcessing *tpidReserved79;
      /* t = 81 */
      NoTpidProcessing *tpidReserved80;
      /* t = 82 */
      NoTpidProcessing *tpidReserved81;
      /* t = 83 */
      NoTpidProcessing *tpidReserved82;
      /* t = 84 */
      NoTpidProcessing *tpidReserved83;
      /* t = 85 */
      NoTpidProcessing *tpidReserved84;
      /* t = 86 */
      NoTpidProcessing *tpidReserved85;
      /* t = 87 */
      NoTpidProcessing *tpidReserved86;
      /* t = 88 */
      NoTpidProcessing *tpidReserved87;
      /* t = 89 */
      NoTpidProcessing *tpidReserved88;
      /* t = 90 */
      NoTpidProcessing *tpidReserved89;
      /* t = 91 */
      NoTpidProcessing *tpidReserved90;
      /* t = 92 */
      NoTpidProcessing *tpidReserved91;
      /* t = 93 */
      NoTpidProcessing *tpidReserved92;
      /* t = 94 */
      NoTpidProcessing *tpidReserved93;
      /* t = 95 */
      NoTpidProcessing *tpidReserved94;
      /* t = 96 */
      NoTpidProcessing *tpidReserved95;
      /* t = 97 */
      NoTpidProcessing *tpidReserved96;
      /* t = 98 */
      NoTpidProcessing *tpidReserved97;
      /* t = 99 */
      NoTpidProcessing *tpidReserved98;
      /* t = 100 */
      NoTpidProcessing *tpidReserved99;
      /* t = 101 */
      NoTpidProcessing *tpidReserved100;
      /* t = 102 */
      NoTpidProcessing *tpidReserved101;
      /* t = 103 */
      NoTpidProcessing *tpidReserved102;
      /* t = 104 */
      NoTpidProcessing *tpidReserved103;
      /* t = 105 */
      NoTpidProcessing *tpidReserved104;
      /* t = 106 */
      NoTpidProcessing *tpidReserved105;
      /* t = 107 */
      NoTpidProcessing *tpidReserved106;
      /* t = 108 */
      NoTpidProcessing *tpidReserved107;
      /* t = 109 */
      NoTpidProcessing *tpidReserved108;
      /* t = 110 */
      NoTpidProcessing *tpidReserved109;
      /* t = 111 */
      NoTpidProcessing *tpidReserved110;
      /* t = 112 */
      NoTpidProcessing *tpidReserved111;
      /* t = 113 */
      NoTpidProcessing *tpidReserved112;
      /* t = 114 */
      NoTpidProcessing *tpidReserved113;
      /* t = 115 */
      NoTpidProcessing *tpidReserved114;
      /* t = 116 */
      NoTpidProcessing *tpidReserved115;
      /* t = 117 */
      NoTpidProcessing *tpidReserved116;
      /* t = 118 */
      NoTpidProcessing *tpidReserved117;
      /* t = 119 */
      NoTpidProcessing *tpidReserved118;
      /* t = 120 */
      NoTpidProcessing *tpidReserved119;
      /* t = 121 */
      NoTpidProcessing *tpidReserved120;
      /* t = 122 */
      NoTpidProcessing *tpidReserved121;
      /* t = 123 */
      NoTpidProcessing *tpidReserved122;
      /* t = 124 */
      NoTpidProcessing *tpidReserved123;
      /* t = 125 */
      NoTpidProcessing *tpidReserved124;
      /* t = 126 */
      NoTpidProcessing *tpidReserved125;
      /* t = 127 */
      NoTpidProcessing *tpidReserved126;
      /* t = 128 */
      NoTpidProcessing *tpidReserved127;
   } u;
} ShortMsgTpdus;

EXTERN int asn1PE_ShortMsgTpdus (OSCTXT* pctxt, ShortMsgTpdus* pvalue);

EXTERN int asn1PD_ShortMsgTpdus (OSCTXT* pctxt, ShortMsgTpdus* pvalue);

EXTERN void asn1Print_ShortMsgTpdus (const char* name, const ShortMsgTpdus* pvalue);

EXTERN int asn1Init_ShortMsgTpdus (ShortMsgTpdus* pvalue);

EXTERN void asn1Free_ShortMsgTpdus (OSCTXT *pctxt, ShortMsgTpdus* pvalue);

/**************************************************************/
/*                                                            */
/*  ShortMsgNpdu                                              */
/*                                                            */
/**************************************************************/
/*
 End of IMPORTS
 WSM
ShortMsgNpdu ::= SEQUENCE {
   subtype [0] EXPLICIT ShortMsgSubtype, -- TPID is part of transport
   transport [1] EXPLICIT ShortMsgTpdus,
   body [2] ShortMsgData -- including two octet length field
}
*/
typedef struct EXTERN ShortMsgNpdu {
   ShortMsgSubtype subtype;
   ShortMsgTpdus transport;
   ShortMsgData body;
} ShortMsgNpdu;

EXTERN int asn1PE_ShortMsgNpdu (OSCTXT* pctxt, ShortMsgNpdu* pvalue);

EXTERN int asn1PD_ShortMsgNpdu (OSCTXT* pctxt, ShortMsgNpdu* pvalue);

EXTERN void asn1Print_ShortMsgNpdu (const char* name, const ShortMsgNpdu* pvalue);

EXTERN int asn1Init_ShortMsgNpdu (ShortMsgNpdu* pvalue);

EXTERN void asn1Free_ShortMsgNpdu (OSCTXT *pctxt, ShortMsgNpdu* pvalue);

/* Value definitions */

#define ASN1V_c_shortMsgVersionNo 3

#ifdef __cplusplus
}
#endif

#endif
